diff -Nuar -r /home/j/src/cmus-v2.5.0/options.c ./options.c
--- /home/j/src/cmus-v2.5.0/options.c	2012-11-07 03:46:17.000000000 -0500
+++ ./options.c	2013-12-30 02:34:35.337749549 -0500
@@ -665,7 +665,7 @@
 }
 
 const char * const aaa_mode_names[] = {
-	"all", "artist", "album", NULL
+	"", "ar", "al", NULL
 };
 
 static void get_aaa_mode(unsigned int id, char *buf)
diff -Nuar -r /home/j/src/cmus-v2.5.0/tree.c ./tree.c
--- /home/j/src/cmus-v2.5.0/tree.c	2012-11-07 03:46:17.000000000 -0500
+++ ./tree.c	2013-12-30 12:48:32.786314281 -0500
@@ -1178,6 +1178,6 @@
 {
 	int rc = __tree_for_each_sel(cb, data, reverse);
 
-	window_down(lib_cur_win, 1);
+	window_down(lib_cur_win, 0);
 	return rc;
 }
diff -Nuar -r /home/j/src/cmus-v2.5.0/ui_curses.c ./ui_curses.c
--- /home/j/src/cmus-v2.5.0/ui_curses.c	2012-11-07 03:46:17.000000000 -0500
+++ ./ui_curses.c	2013-12-30 13:38:47.943392466 -0500
@@ -144,8 +144,6 @@
 static int cursor_x;
 static int cursor_y;
 
-static char *title_buf = NULL;
-
 enum {
 	CURSED_WIN,
 	CURSED_WIN_CUR,
@@ -523,7 +521,7 @@
 	struct artist *artist;
 	struct album *album;
 	struct iter sel;
-	int current, selected, active, pos;
+	int current, selected, active, pos, n, itera;
 
 	artist = iter_to_artist(iter);
 	album = iter_to_album(iter);
@@ -542,7 +540,7 @@
 
 	if (active && selected) {
 		cursor_x = 0;
-		cursor_y = 1 + row;
+		cursor_y = row;
 	}
 
 	pos = 0;
@@ -550,6 +548,21 @@
 	if (album) {
 		print_buffer[pos++] = ' ';
 		print_buffer[pos++] = ' ';
+		if (album->date > 0) {
+			n = album->date / 10000;
+			itera = 3;
+			do {
+				int digit = n%10;
+				print_buffer[pos+itera] = '0' + digit;
+				itera--;
+			}
+			while (n/=10);
+			pos = pos + 4;
+			print_buffer[pos++] = ' ';
+			print_buffer[pos++] = ':';
+			print_buffer[pos++] = ':';
+			print_buffer[pos++] = ' ';
+		}
 		str = album->name;
 	} else {
 		if (display_artist_sort_name)
@@ -560,7 +573,7 @@
 	pos += format_str(print_buffer + pos, str, tree_win_w - pos - 1);
 	print_buffer[pos++] = ' ';
 	print_buffer[pos++] = 0;
-	dump_print_buffer(tree_win_y + row + 1, tree_win_x);
+	dump_print_buffer(tree_win_y + row, tree_win_x);
 }
 
 static inline void fopt_set_str(struct format_option *fopt, const char *str)
@@ -663,7 +676,7 @@
 
 	if (active && selected) {
 		cursor_x = track_win_x;
-		cursor_y = 1 + row;
+		cursor_y = row;
 	}
 
 	ti = tree_track_info(track);
@@ -679,7 +692,7 @@
 	} else {
 		format_print(print_buffer, track_win_w, track_win_alt_format, track_fopts);
 	}
-	dump_print_buffer(track_win_y + row + 1, track_win_x);
+	dump_print_buffer(track_win_y + row, track_win_x);
 }
 
 /* used by print_editable only */
@@ -825,23 +838,23 @@
 	}
 
 	switch (e->type) {
-	case HE_TEXT:
-		snprintf(buf, sizeof(buf), " %s", e->text);
-		break;
-	case HE_BOUND:
-		snprintf(buf, sizeof(buf), " %-8s %-14s %s",
-			key_context_names[e->binding->ctx],
-			e->binding->key->name,
-			e->binding->cmd);
-		break;
-	case HE_UNBOUND:
-		snprintf(buf, sizeof(buf), " %s", e->command->name);
-		break;
-	case HE_OPTION:
-		opt = e->option;
-		snprintf(buf, sizeof(buf), " %-29s ", opt->name);
-		opt->get(opt->id, buf + strlen(buf));
-		break;
+		case HE_TEXT:
+			snprintf(buf, sizeof(buf), " %s", e->text);
+			break;
+		case HE_BOUND:
+			snprintf(buf, sizeof(buf), " %-8s %-14s %s",
+					key_context_names[e->binding->ctx],
+					e->binding->key->name,
+					e->binding->cmd);
+			break;
+		case HE_UNBOUND:
+			snprintf(buf, sizeof(buf), " %s", e->command->name);
+			break;
+		case HE_OPTION:
+			opt = e->option;
+			snprintf(buf, sizeof(buf), " %-29s ", opt->name);
+			opt->get(opt->id, buf + strlen(buf));
+			break;
 	}
 	pos = format_str(print_buffer, buf, COLS - 1);
 	print_buffer[pos++] = ' ';
@@ -854,7 +867,7 @@
 {
 	struct iter iter;
 	int nr_rows;
-	int c, i;
+	int c, i, treev;
 
 	win->changed = 0;
 
@@ -879,8 +892,15 @@
 	bkgdset(pairs[0]);
 	memset(print_buffer, ' ', w);
 	print_buffer[w] = 0;
+	treev = 1;
+	/* fixes the "phantom song" issue caused by not displaying the "Track - Title" header */
+	switch (cur_view) {
+		case TREE_VIEW:
+			treev = 0;
+			break;
+	}
 	while (i < nr_rows) {
-		dump_print_buffer(y + i + 1, x);
+		dump_print_buffer(y + i + treev, x);
 		i++;
 	}
 }
@@ -897,7 +917,6 @@
 
 	/* it doesn't matter what format options we use because the format
 	 * string does not contain any format charaters */
-	format_print(title, track_win_w - 2, "Track%=Library", track_fopts);
 	update_window(lib_track_win, track_win_x, track_win_y,
 			track_win_w, title, print_track);
 }
@@ -1000,7 +1019,7 @@
 	bkgdset(pairs[CURSED_WIN_TITLE]);
 	(void) mvaddch(0, tree_win_w, ' ');
 	bkgdset(pairs[CURSED_SEPARATOR]);
-	for (row = 1; row < LINES - 3; row++)
+	for (row = 0; row < LINES - 2; row++)
 		(void) mvaddch(row, tree_win_w, ACS_VLINE);
 }
 
@@ -1010,54 +1029,57 @@
 	cursor_y = -1;
 
 	switch (cur_view) {
-	case TREE_VIEW:
-		editable_lock();
-		if (full || lib_tree_win->changed)
-			update_tree_window();
-		if (full || lib_track_win->changed)
-			update_track_window();
-		editable_unlock();
-		draw_separator();
-		update_filterline();
-		break;
-	case SORTED_VIEW:
-		editable_lock();
-		update_sorted_window();
-		editable_unlock();
-		update_filterline();
-		break;
-	case PLAYLIST_VIEW:
-		editable_lock();
-		update_pl_window();
-		editable_unlock();
-		break;
-	case QUEUE_VIEW:
-		editable_lock();
-		update_play_queue_window();
-		editable_unlock();
-		break;
-	case BROWSER_VIEW:
-		update_browser_window();
-		break;
-	case FILTERS_VIEW:
-		update_filters_window();
-		break;
-	case HELP_VIEW:
-		update_help_window();
-		break;
+		case TREE_VIEW:
+			editable_lock();
+			if (full || lib_tree_win->changed)
+				update_tree_window();
+			if (full || lib_track_win->changed)
+				update_track_window();
+			editable_unlock();
+			draw_separator();
+			update_filterline();
+			break;
+		case SORTED_VIEW:
+			editable_lock();
+			update_sorted_window();
+			editable_unlock();
+			update_filterline();
+			break;
+		case PLAYLIST_VIEW:
+			editable_lock();
+			update_pl_window();
+			editable_unlock();
+			break;
+		case QUEUE_VIEW:
+			editable_lock();
+			update_play_queue_window();
+			editable_unlock();
+			break;
+		case BROWSER_VIEW:
+			update_browser_window();
+			break;
+		case FILTERS_VIEW:
+			update_filters_window();
+			break;
+		case HELP_VIEW:
+			update_help_window();
+			break;
 	}
 }
 
 static void do_update_statusline(void)
 {
-	static const char *status_strs[] = { ".", ">", "|" };
+	static const char *status_strs[] = { " ", "╼", "┄" };
 	static const char *cont_strs[] = { " ", "C" };
 	static const char *repeat_strs[] = { " ", "R" };
 	static const char *shuffle_strs[] = { " ", "S" };
 	int buffer_fill, vol, vol_left, vol_right;
 	int duration = -1;
 	char *msg;
-	char format[80];
+	char format[COLS*4]; // multiplying because of the unicode chars I'm trying to use like a derp hacker
+	float perc_pos;
+	int reserved_pb = 2; // progressbar
+	float num_done_pb; // progressbar
 
 	editable_lock();
 	fopt_set_time(&status_fopts[SF_TOTAL], play_library ? lib_editable.total_time :
@@ -1101,40 +1123,41 @@
 	fopt_set_str(&status_fopts[SF_CONTINUE], cont_strs[player_cont]);
 	fopt_set_int(&status_fopts[SF_BITRATE], player_info.current_bitrate / 1000. + 0.5, 0);
 
-	strcpy(format, " %s %p ");
-	if (duration != -1)
-		strcat(format, "/ %d ");
-	strcat(format, "- %t ");
-	if (vol >= 0) {
-		if (vol_left != vol_right) {
-			strcat(format, "vol: %l,%r ");
-		} else {
-			strcat(format, "vol: %v ");
-		}
-	}
-	if (player_info.ti) {
-		if (is_http_url(player_info.ti->filename))
-			strcat(format, "buf: %b ");
-		if (show_current_bitrate && player_info.current_bitrate >= 0)
-			strcat(format, " %B kbps ");
-	}
-	strcat(format, "%=");
+	perc_pos = fabs((float)player_info.pos/(float)duration);
+	strcpy(format, " ");
 	if (player_repeat_current) {
-		strcat(format, "repeat current");
+		strcat(format, "rep cur :: ");
+		reserved_pb += 11;
 	} else if (play_library) {
 		/* artist/album modes work only in lib */
 		if (shuffle) {
 			/* shuffle overrides sorted mode */
-			strcat(format, "%L from library");
+			strcat(format, "%L :: ");
+			reserved_pb += 6; // aaa_mode_names[] in options.c - WATCH THE FUCK OUT FOR UPDATES FIXME
 		} else if (play_sorted) {
-			strcat(format, "%L from sorted library");
+			strcat(format, "%L :: s :: ");
+			reserved_pb += 11;
 		} else {
-			strcat(format, "%L from library");
+			strcat(format, "%L :: ");
+			reserved_pb += 6; // aaa_mode_names[] in options.c - WATCH THE FUCK OUT FOR UPDATES FIXME
 		}
 	} else {
-		strcat(format, "playlist");
+		strcat(format, "pls :: ");
+		reserved_pb += 7;
 	}
-	strcat(format, " | %1C%1R%1S ");
+	strcat(format, "%1C%1R%1S :: ");
+	reserved_pb += 7;
+	num_done_pb = (COLS-reserved_pb) * perc_pos;
+	if (player_info.ti) {
+		if (! is_http_url(player_info.ti->filename)) {
+			for (int i=0; i<(int)num_done_pb-1; i++) { strcat(format, "─"); }
+			strcat(format, "%s");
+		}
+		else {
+			strcat(format, "buffered %3b%%");
+		}
+	}
+	strcat(format, " ");
 	format_print(print_buffer, COLS, format, status_fopts);
 
 	msg = player_info.error_msg;
@@ -1282,82 +1305,6 @@
 	return NULL;
 }
 
-static void set_title(const char *title)
-{
-	if (!set_term_title)
-		return;
-
-	if (t_ts) {
-		printf("%s%s%s", tgoto(t_ts, 0, 0), title, t_fs);
-		fflush(stdout);
-	}
-}
-
-static void do_update_titleline(void)
-{
-	bkgdset(pairs[CURSED_TITLELINE]);
-	player_info_lock();
-	if (player_info.ti) {
-		int i, use_alt_format = 0;
-		char *wtitle;
-
-		fill_track_fopts_track_info(player_info.ti);
-
-		use_alt_format = !track_info_has_tag(player_info.ti);
-
-		if (is_http_url(player_info.ti->filename)) {
-			const char *title = get_stream_title();
-
-			if (title != NULL) {
-				free(title_buf);
-				title_buf = to_utf8(title, icecast_default_charset);
-				/*
-				 * StreamTitle overrides radio station name
-				 */
-				use_alt_format = 0;
-				fopt_set_str(&track_fopts[TF_TITLE], title_buf);
-			}
-		}
-
-		if (use_alt_format) {
-			format_print(print_buffer, COLS, current_alt_format, track_fopts);
-		} else {
-			format_print(print_buffer, COLS, current_format, track_fopts);
-		}
-		dump_print_buffer(LINES - 3, 0);
-
-		/* set window title */
-		if (use_alt_format) {
-			format_print(print_buffer, print_buffer_max_width,
-					window_title_alt_format, track_fopts);
-		} else {
-			format_print(print_buffer,  print_buffer_max_width,
-					window_title_format, track_fopts);
-		}
-
-		/* remove whitespace */
-		i = strlen(print_buffer) - 1;
-		while (i > 0 && print_buffer[i] == ' ')
-			i--;
-		print_buffer[i + 1] = 0;
-
-		if (using_utf8) {
-			wtitle = print_buffer;
-		} else {
-			utf8_decode(print_buffer);
-			wtitle = conv_buffer;
-		}
-
-		set_title(wtitle);
-	} else {
-		move(LINES - 3, 0);
-		clrtoeol();
-
-		set_title("cmus " VERSION);
-	}
-	player_info_unlock();
-}
-
 static int cmdline_cursor_column(void)
 {
 	char *str;
@@ -1426,7 +1373,6 @@
 void update_titleline(void)
 {
 	curs_set(0);
-	do_update_titleline();
 	post_update();
 }
 
@@ -1438,7 +1384,6 @@
 	curs_set(0);
 
 	do_update_view(1);
-	do_update_titleline();
 	do_update_statusline();
 	do_update_commandline();
 
@@ -1830,7 +1775,6 @@
 	track_win_x = tree_win_w + 1;
 	track_win_y = 0;
 
-	h--;
 	window_set_nr_rows(lib_tree_win, h);
 	window_set_nr_rows(lib_track_win, h);
 }
@@ -1853,7 +1797,7 @@
 			resizeterm(lines, columns);
 #endif
 			w = COLS;
-			h = LINES - 3;
+			h = LINES - 2;
 			if (w < 16)
 				w = 16;
 			if (h < 8)
@@ -1938,14 +1882,16 @@
 	if (needs_view_update || needs_title_update || needs_status_update || needs_command_update) {
 		curs_set(0);
 
-		if (needs_view_update)
+		if (needs_view_update) {
 			do_update_view(0);
-		if (needs_title_update)
-			do_update_titleline();
+			do_update_statusline();
+		}
 		if (needs_status_update)
 			do_update_statusline();
-		if (needs_command_update)
+		if (needs_command_update) {
 			do_update_commandline();
+			do_update_statusline();
+		}
 		post_update();
 	}
 }
